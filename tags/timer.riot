<timer>
    <span class="unprogress-bar">{this.state.time}</span>
    <style>
		.unprogress-bar {
			display: flex;
			justify-content: center;
			font-size: 3vh;
			font-family: "thinoo";
			line-height: 5vh;
			background-color: green;
			width: 41vh;
			border-radius: 2.5vh;
			height: 5vh;
		}
    </style>
    <script>
        export default {
			state : {
				timer: 0,
				time:500,
				launched: false,
				barSize: undefined
			},
			onBeforeUpdate(props, state) {
				if (!this.props.timerState) {
					clearInterval(this.state.timer);
					this.state.time=this.props.resetValue;
					this.state.launched=false;
				} else if (this.props.timerState && !this.state.launched) {
					this.state.launched=true;
					this.startTimer();
				}
			},
			startTimer() {
				if(this.state.barSize == undefined) {
					this.state.barSize = this.$(".unprogress-bar").clientWidth;
					console.log("once only");
				}
				this.state.timer = setInterval(() => {

                    this.state.time--;
                    //this.update();
                    if (this.state.time == 0) {
                        this.props.removeLifecallback(true);

                    }
					this.$(".unprogress-bar").style.width = `${this.state.barSize * (this.state.time / this.props.resetValue)}px`;
					this.update();
                },10);
			}
        }
    </script>
</timer>