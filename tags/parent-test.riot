<parent-test>
    <div class="question-box">
        <div id="health" class="health">HP : {this.state.lives}</div>
        <test-question question={this.state.question}></test-question>
        <timer removeLifecallback={this.removeLife} timerState={this.state.timerState} resetValue={this.state.timerValue}></timer>
        <test-answer endTime={this.state.endTime} mustReset={this.state.reset} answers={this.state.answers} stopTimercallback={this.stopTimer} addPointcallback={this.addPoint} removeLifecallback={this.removeLife}></test-answer>
        <div class="points">{this.state.points}</div>
    </div>
    <style>
        .question-box {
            display: flex;
            flex-direction: column;
            align-content: center;
            align-items: center;
        }
        test-answer {
            margin-top:4vh;
            margin-bottom:4vh;
        }

        .timeBeforeFalse {
            font-family: "thinoo";
        }

        .health {
            font-family: "thinoo";
            font-size: 5vh;
        }

        .critical {
            color: crimson;
        }

        .points {
            font-family: "thinoo";
            color: white;
            font-size: 5vh;
        }
    </style>
    <script>
        export default{
            state:{
                answers : {},
                question : "",
                index : -1,
                points : 0,
                lives : 5,
                timerState : false,
                reset: true,
                endTime: false,
                timerValue: 500,
            },
            onBeforeMount(props, state) {
                this.generate();
            },
            onBeforeUpdate(props, state) {
                
            },
            getRandomInt(max) {
                return Math.floor(Math.random() * max);
            },
            generate() {
                
                const randint = this.getRandomInt(data.length); // generate question and good answer
                let listRomaji = [];
                this.state.question = data[randint].symbol;
                listRomaji.push(data[randint].romaji);

                for(let i = 0; i < 3; i++) { // generate 3 other answers
                    let element;
                    do {
                        element = data[this.getRandomInt(data.length)];
                    } while((listRomaji.includes(element.romaji)));
                    listRomaji.push(element.romaji);
                }

                for (let i = listRomaji.length - 1; i > 0; i--) { // shuffle the list of answer
                    const j = Math.floor(Math.random() * (i + 1));
                    const temp = listRomaji[i];
                    listRomaji[i] = listRomaji[j];
                    listRomaji[j] = temp;
                }
                
                this.state.index = listRomaji.indexOf(data[randint].romaji); // get the index of the good answer
                this.state.answers = {"list" : listRomaji, "solution": this.state.index};
                
            },
            addPoint() {
                this.state.timerState=false;
                this.state.reset = false;
                this.state.points++;
                this.update();
                this.waitBeforeNext(500);
            },
            removeLife(isEndTime) {
                var vie = document.getElementById('health');
                this.state.timerState=false;
                this.state.reset = false;
                this.state.lives--;
                this.state.endTime = isEndTime;
                this.update();
                if (this.state.lives==0) {
                    this.waitBeforeReset();
                } else {
                    if (this.state.lives==1 || this.state.lives==0) {
                        vie.classList.add("critical");
                    } else {
                        vie.classList.remove("critical");
                    }
                    this.waitBeforeNext(2000);
                }
            },
            regenerate() {
                this.generate();
                this.state.timerState= true;
                this.state.reset = true;
                this.state.endTime = false;
                this.update();
            },
            waitBeforeNext(waitTime) {
                setTimeout(() => {
                        this.state.timerValue = this.calculateTime(this.state.points);
                        this.regenerate();
                    }, waitTime);
            },
            waitBeforeReset() {
                setTimeout(() => {
                    this.generate();
                    document.getElementById('health').classList.remove("critical");
                    this.state.reset = true;
                    this.state.lives=5;
                    this.state.points=0;
                    this.state.endTime = false;
                    this.state.timerValue = this.calculateTime(this.state.points);
                    this.update();
                }, 5000);
            },
            calculateTime(point) {
                return Math.floor(((-10*Math.log(0.1*(point+20)))+57)*10);
            }
        }
    </script>
</parent-test>